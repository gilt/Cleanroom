![Gilt Tech logo](https://raw.githubusercontent.com/gilt/Cleanroom/${repo:branch}/Assets/gilt-tech-logo.png)

^q(#) $project:name Integration Notes

This document describes how to integrate $project:name into your application.

$project:name is designed as a *universal Swift framework* with support for the following platform^if($project:platforms.count -GT 1|s within a single binary):

Platform|Latest supported OS|Oldest supported OS
--------|-------------------|-------------------
^if($supports:iOS|iPhone/iPad^q(|)iOS $versions[$repo:branch:settings][current][iOS]^q(|)iOS $versions[$repo:branch:settings][minimum][iOS]
)^if($supports:macOS|Macintosh^q(|)macOS $versions[$repo:branch:settings][current][macOS]^q(|)macOS $versions[$repo:branch:settings][minimum][macOS]
)^if($supports:tvOS|Apple TV^q(|)tvOS $versions[$repo:branch:settings][current][tvOS]^q(|)tvOS $versions[$repo:branch:settings][minimum][tvOS]
)^if($supports:watchOS|Apple Watch^q(|)watchOS $versions[$repo:branch:settings][current][watchOS]^q(|)watchOS $versions[$repo:branch:settings][minimum][watchOS]
)
^if($repo:branch -NE master|**This is the `$repo:branch` branch of $project:name.** It|$project:name) uses **Swift $versions[$repo:branch:settings][Swift]** and **requires Xcode $versions[$repo:branch:settings][Xcode]** to compile.

^q(###) Options for integration

There are two supported options for integration:

- **[Carthage integration](#carthage-integration)** uses the [Carthage](https://github.com/Carthage/Carthage) dependency manager to add $project:name to your project.

- **[Manual integration](#manual-integration)** involves embedding the `${project:file}` file within your project’s Xcode workspace.

^q(##) Carthage Integration

Carthage is a third-party package dependency manager for Apple platforms. As of this writing, the current supported version of Carthage is $versions[$repo:branch:settings][Carthage].

Installing and using Carthage is beyond the scope of this document. If you do not have Carthage installed but would like to use it, [you can find installation instructions on the project page](https://github.com/Carthage/Carthage#installing-carthage). 

^q(###) 1. Add $project:name to Cartfile

Within to your project’s root directory, Carthage-based projects will store a file named "[`Cartfile`](https://github.com/Carthage/Carthage/blob/master/Documentation/Artifacts.md#cartfile)".

To integrate $project:name in your workspace, you would start by adding the following line to the `Cartfile`:

```
$docs:carthageSpec ~> $project:version
```

^q(###) 2. Download $project:name using Carthage

Once added to your `Cartfile`, you can use Carthage to download $project:name to your machine:

```
carthage bootstrap --no-build
```

Normally, Carthage automatically builds framework binaries for all dependencies in the `Cartfile`. By passing the `--no-build` argument to `carthage bootstrap`, Carthage only downloads the dependencies; it doesn't build them. This preserves your option of building the dependencies directly within your own Xcode workspace.

> If you do not wish to have Carthage build dependencies that it has downloaded, you can proceed to the [Manual Integration](#manual-integration) section.

^q(###) 3. Build $project:name using Carthage

To have Carthage build (or re-build) $project:name, issue the command:

```
carthage build $project:name
```

You can also use the `--platform` argument to speed up build times by limiting the set of processor architectures that need to be built.

To build for|Supply the argument
------------|-------------------
^if($supports:iOS|iPhone/iPad^q(|)`--platform ios`
)^if($supports:macOS|Macintosh^q(|)`--platform mac`
)^if($supports:tvOS|Apple TV^q(|)`--platform tvos`
)^if($supports:watchOS|Apple Watch^q(|)`--platform watchos`
)

Even though $project:name is designed as a universal framework, during the build process, Carthage splits the framework into separate binaries for each Apple platform.

The binary for|Is located at
--------------|-------------
^if($supports:iOS|iPhone/iPad^q(|)`Carthage/Build/iOS/${project:framework}`
)^if($supports:macOS|Macintosh^q(|)`Carthage/Build/Mac/${project:framework}`
)^if($supports:tvOS|Apple TV^q(|)`Carthage/Build/tvOS/${project:framework}`
)^if($supports:watchOS|Apple Watch^q(|)`Carthage/Build/watchOS/${project:framework}`
)

For further information on integrating Carthage-built frameworks, see the section on "[Adding frameworks to an application](https://github.com/Carthage/Carthage#adding-frameworks-to-an-application)" in the [Carthage documentation](https://github.com/Carthage/Carthage#carthage--).

^q(###) 4. Add the import statement

Once properly integrated, you can make use of ^if($repo:isPrivate|the API|[the API]($docs:api:index)) provided by $project:name using the statement:

```swift
$project:import
```

^q(##) Manual Integration

Manual integration involves embedding `${project:file}` directly in your own Xcode workspace.

> **Note:** You *must* use an Xcode workspace specifically—and not just a project file—in order to integrate $project:name manually.

^q(###) Integration possibilities

There are several possibilities for manually integrating $project:name with your workspace.

^q(####) Carthage

If you use Carthage only for downloading dependencies—and not for building them—you will want to integrate the project file found at:

```
Carthage/Checkouts/${project:name}/${project:file}
```

^q(####) Git Submodules

If you’re not using Carthage, the recommended integration mechanism is to add $project:name to your git repo as a submodule. (This, of course, assumes that your project is stored in a git repo.)

For example, to install $project:name at `Libraries/${project:name}`, you could issue the command:

```bash
git submodule add $repo:url:http Libraries/${project:name}
```

Upon successful completion, the project file would be found at:

```
Libraries/${project:name}/${project:file}
```

^q(####) Other

If you acquired the ${project:name}’s source code through some other means, locate the `${project:file}` file.

^q(###) 1. Embed $project:file in your workspace

In Finder, located the `${project:file}` file that you’ll be integrating. Then, drag it into *the top level* of Xcode’s Project Navigator pane for your workspace, being careful not to drag the file *into* any other projects listed there.

^q(###) 2. Perform a test build

Select the "${project:name}" build scheme, and then invoke *Build* (⌘B) from the *Product* menu.

If there are no buld errors, `${project:file}` was correctly added to the workspace.

^q(###) 3. Add the necessary dependencies to your target

In Xcode, select the *General* tab in the build settings for your application target. Scroll to the bottom of the screen to reveal the section entitled *Embedded Binaries* (the second-to-last section).

Go back to Finder, select the file^if($project:dependencies|s) $docs:frameworkAndList, and then drag ^if($project:dependencies|them|it) into the list area directly below *Embedded Binaries*.

If successful, you should see $docs:frameworkAndList listed under both the *Embedded Binaries* and *Linked Frameworks and Libraries* sections.

^q(###) 4. Add the import statement

You can then make use of ^if($repo:isPrivate|the API|[the API]($docs:api:index)) provided by $project:name using the statement:

```swift
$project:import
```

^q(##) Further Reading

Want to learn more about ${project:name}? Check out [the README](${repo:url:home}/blob/${repo:branch}/README.md).

**_Happy coding!_**
